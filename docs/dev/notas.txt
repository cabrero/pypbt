Exploiting the features of the Python language to produce code that is clear, concise and maintainable.
Pythonic means code that doesn't just get the syntax right but that follows the conventions of the Python community and uses the language in the way it is intended to be used.
This is maybe easiest to explain by negative example, as in the linked article from the other answers. Examples of unpythonic code often come from users of other languages, who instead of learning a Python programming patterns such as list comprehensions or generator expressions, attempt to crowbar in patterns more commonly used in C or java. Loops are particularly common examples of this.
For example in Java I might use
for(int index=0; index < items.length; index++) { items[index].performAction(); } 
In Python we can try and replicate this using while loops but it would be cleaner to use
for item in items: item.perform_action() 
Or, even a generator expression
(item.some_attribute for item in items) 
So essentially when someone says something is unpythonic, they are saying that the code could be re-written in a way that is a better fit for pythons coding style.
Typing import this at the command line gives a summary of Python principles. Less well known is that the source code for import this is decidedly, and by design, unpythonic! Take a look at it for an example of what not to do.

Share

Improve this answer

Follow

edited Feb 28 at 4:39

￼

Toastrackenigma

5,08933 gold badges3232 silver badges4949 bronze badges

answered Jul 29 '14 at 8:52

￼

James

2,48011 gold badge1515 silver badges2626 bronze badges

28

Btw, the source code for "import this" is here: github.com/python/cpython/blob/master/Lib/this.py – Gautam Sep 2 '16 at 14:43

What would be an example in a different field? Like cooking, designing, driving..? – Daniel Springer Oct 7 '16 at 15:18 

2

For an example of some more complex code, an "unpythonic" implementation of the Vigenere cipher is made progressively more "pythonic" in this answer (disclosure: my code and opinions): stackoverflow.com/questions/2490334/… – Nick Nov 8 '17 at 0:46 

22

I think I should leave a comment here given my user name – Pythonic Jul 28 '18 at 15:03

1

Also perhaps worth noting that the general term is "idiomatic" – Louis Maddox Nov 13 '20 at 12:19





Idiomatic means following the conventions of the language. You want to find the easiest and most common ways of accomplishing a task rather than porting your knowledge from a different language.
non-idiomatic python using a loop with append:
mylist = [1, 2, 3, 4] newlist = [] for i in mylist: newlist.append(i * 2) 
idiomatic python using a list comprehension:
mylist = [1, 2, 3, 4] newlist = [(i * 2) for i in mylist] 





Un ejemplo un poco más skilled. Aparece en la intro de hypothesis y está tomado de https://rosettacode.org/wiki/Run-length_encoding

Primero totalmente c-style

```python
def decode(lst):
    q = ""
    for i in range(0, len(lst)):
        character = lst[i][0] 
        count = lst[i][1] 
        q += character * count
    return q
        
```

Versión de la página. Más pythonic

```python
def decode(lst):
    q = ""
    for character, count in list:
        q += character * count
    return q
```

Versión más pythonic y más performant

```python
def decode(lst):
    return "".join(character * count for character, count in list)
```



# Hypothesis vs eris https://hypothesis.works/articles/hypothesis-vs-eris/ 

```php
<?php
use Eris\Generator;
use Eris\TestTrait;

class IntegerTest extends PHPUnit_Framework_TestCase
{
    use TestTrait;

    public function testSumIsCommutative()
    {
        $this
            ->forAll(
                Generator\int(),
                Generator\int()
            )
            ->then(function ($first, $second) {
                $x = $first + $second;
                $y = $second + $first;
                $this->assertEquals(
                    $x,
                    $y,
                    "Sum between {$first} and {$second} should be commutative"
                );
            });
    }
```
function forAll ... then ...
El argumento de then es una función con la "propiedad"
En python podemos simplifcar el código decorando esa función 
